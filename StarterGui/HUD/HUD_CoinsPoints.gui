<?xml version="1.0" encoding="utf-8"?>
<roblox xmlns:xmime="http://www.w3.org/2005/05/xmlmime" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="4">
    <Item class="ScreenGui" referent="RBX0">
        <Properties>
            <BinaryString name="AttributesSerialize"></BinaryString>
            <int name="DisplayOrder">0</int>
            <bool name="Enabled">true</bool>
            <bool name="IgnoreGuiInset">true</bool>
            <string name="Name">HUD_CoinsPoints</string>
            <bool name="ResetOnSpawn">false</bool>
            <token name="ZIndexBehavior">Sibling</token>
        </Properties>
        <Item class="TextLabel" referent="RBX1">
            <Properties>
                <BinaryString name="AttributesSerialize"></BinaryString>
                <token name="AutomaticSize">None</token>
                <Vector2 name="AnchorPoint">0 0</Vector2>
                <float name="BackgroundTransparency">1</float>
                <Color3 name="BackgroundColor3">0 0 0</Color3>
                <Color3 name="BorderColor3">0 0 0</Color3>
                <int name="BorderSizePixel">0</int>
                <bool name="ClipsDescendants">false</bool>
                <string name="Name">CoinPointDisplay</string>
                <UDim2 name="Position">
                    <UDim name="X" Scale="0" Offset="24" />
                    <UDim name="Y" Scale="0" Offset="24" />
                </UDim2>
                <UDim2 name="Size">
                    <UDim name="X" Scale="0" Offset="260" />
                    <UDim name="Y" Scale="0" Offset="40" />
                </UDim2>
                <Color3 name="TextColor3">1 1 1</Color3>
                <token name="Font">SourceSansBold</token>
                <float name="TextSize">24</float>
                <string name="Text">Coins: 0  |  Points: 0</string>
                <token name="TextXAlignment">Left</token>
                <token name="TextYAlignment">Center</token>
                <bool name="RichText">false</bool>
            </Properties>
        </Item>
        <Item class="LocalScript" referent="RBX2">
            <Properties>
                <BinaryString name="AttributesSerialize"></BinaryString>
                <string name="Name">CoinPointController</string>
                <ProtectedString name="Source"><![CDATA[local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

local localPlayer = Players.LocalPlayer
local playerGui = localPlayer:WaitForChild("PlayerGui")
local screenGui = script.Parent

if screenGui and screenGui.Parent ~= playerGui then
    screenGui.Parent = playerGui
end

local displayLabel = screenGui:WaitForChild("CoinPointDisplay")

local remotesFolder = ReplicatedStorage:WaitForChild("Remotes")
local remoteBootstrap = remotesFolder:WaitForChild("RemoteBootstrap")
local ok, remoteModule = pcall(require, remoteBootstrap)
if not ok then
    warn(string.format("[HUD_CoinsPoints] Failed to require RemoteBootstrap: %s", tostring(remoteModule)))
    remoteModule = nil
elseif typeof(remoteModule) ~= "table" then
    remoteModule = nil
end

local coinPointRemote = remoteModule and remoteModule.RE_CoinPointDelta

local coinsTotal = localPlayer:GetAttribute("Coins")
if typeof(coinsTotal) ~= "number" then
    coinsTotal = 0
end

local pointsTotal = localPlayer:GetAttribute("Points")
if typeof(pointsTotal) ~= "number" then
    pointsTotal = 0
end

local renderQueued = false
local lastRenderTime = 0
local MIN_RENDER_INTERVAL = 0.05

local function render()
    renderQueued = false
    lastRenderTime = os.clock()
    displayLabel.Text = string.format("Coins: %d  |  Points: %d", coinsTotal, pointsTotal)
end

local function queueRender()
    if renderQueued then
        return
    end

    renderQueued = true
    local delaySeconds = MIN_RENDER_INTERVAL - (os.clock() - lastRenderTime)
    if delaySeconds > 0 then
        task.delay(delaySeconds, render)
    else
        task.defer(render)
    end
end

local function updateTotals(newCoins, newPoints)
    local changed = false

    if typeof(newCoins) == "number" then
        newCoins = math.max(0, math.floor(newCoins + 0.5))
        if coinsTotal ~= newCoins then
            coinsTotal = newCoins
            changed = true
        end
    end

    if typeof(newPoints) == "number" then
        newPoints = math.max(0, math.floor(newPoints + 0.5))
        if pointsTotal ~= newPoints then
            pointsTotal = newPoints
            changed = true
        end
    end

    if changed then
        queueRender()
    end
end

queueRender()

local function applyPayload(payload)
    if typeof(payload) ~= "table" then
        return
    end

    local totalCoinsValue = payload.totalCoins
    local totalPointsValue = payload.totalPoints

    if typeof(totalCoinsValue) ~= "number" then
        local deltaCoins = payload.coins
        if typeof(deltaCoins) == "number" then
            totalCoinsValue = coinsTotal + deltaCoins
        end
    end

    if typeof(totalPointsValue) ~= "number" then
        local deltaPoints = payload.points
        if typeof(deltaPoints) == "number" then
            totalPointsValue = pointsTotal + deltaPoints
        end
    end

    updateTotals(totalCoinsValue, totalPointsValue)
end

local attributeConnections = {}

local function onAttributeChanged(attributeName)
    if attributeName == "Coins" then
        updateTotals(localPlayer:GetAttribute("Coins"), nil)
    elseif attributeName == "Points" then
        updateTotals(nil, localPlayer:GetAttribute("Points"))
    end
end

attributeConnections[#attributeConnections + 1] = localPlayer.AttributeChanged:Connect(onAttributeChanged)

if coinPointRemote then
    coinPointRemote.OnClientEvent:Connect(applyPayload)
end

script.Destroying:Connect(function()
    for _, connection in ipairs(attributeConnections) do
        if connection.Connected then
            connection:Disconnect()
        end
    end
end)
]]></ProtectedString>
            </Properties>
        </Item>
    </Item>
</roblox>
